{"version":3,"sources":["services/numbers.js","components/Notification.js","components/Filter.js","components/PersonForm.js","components/Person.js","components/Button.js","components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","numbers","axios","get","newObject","post","id","put","concat","delete","Notification","_ref","message","color","messageStyle","borderColor","background","fontSize","borderStyle","borderRadius","padding","marginBottom","react_default","a","createElement","style","Filter","limit","handleLimitChange","value","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Person","person","key","name","number","Button","handleClick","text","onClick","Persons","persons","callServer","filter","element","toUpperCase","startsWith","map","components_Person","components_Button","window","confirm","deleteNumber","App","useEffect","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setMessage","_useState5","_useState6","messageColor","setMessageColor","_useState7","_useState8","setNewName","_useState9","_useState10","setNewNumber","_useState11","_useState12","setLimit","sameName","showMessage","setTimeout","method","numberService","then","response","data","personToChange","find","catch","components_Notification","components_Filter","event","target","components_PersonForm","preventDefault","undefined","alert","components_Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98617c8f.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'https://sleepy-taiga-19012.herokuapp.com/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n  }\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\n\r\nconst Notification = ({ message, color }) => {\r\n\r\n    let messageStyle = {}\r\n    \r\n    if (color === 'green')\r\n    {\r\n        messageStyle = {\r\n            color: 'green',\r\n            borderColor: 'green',\r\n            background: 'lightgrey',\r\n            fontSize: 20,\r\n            borderStyle: 'solid',\r\n            borderRadius: 5,\r\n            padding: 10,\r\n            marginBottom: 10\r\n        }\r\n    }\r\n    if (color === 'red')\r\n    {\r\n        messageStyle = {\r\n            color: 'red',\r\n            borderColor: 'red',\r\n            background: 'lightgrey',\r\n            fontSize: 20,\r\n            borderStyle: 'solid',\r\n            borderRadius: 5,\r\n            padding: 10,\r\n            marginBottom: 10\r\n        }\r\n    }\r\n\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div style={messageStyle}>\r\n        {message}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Filter = ({limit, handleLimitChange}) => {\r\n    return (\r\n      <div>\r\n        rajaa näytettäviä <input\r\n        value={limit}\r\n        onChange={handleLimitChange}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = ({addPerson,\r\n  newName, handleNameChange,\r\n  newNumber, handleNumberChange}) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n    <div>\r\n      nimi: <input\r\n      value={newName}\r\n      onChange={handleNameChange} />\r\n    </div>\r\n    <div>\r\n      numero: <input\r\n      value={newNumber}\r\n      onChange={handleNumberChange} />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">lisää</button>\r\n    </div>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Person = ({person}) => {\r\n    return (\r\n        <div>\r\n            <p key={person.name}>{person.name} {person.number}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst Button = ({ handleClick, text }) => \r\n    <button onClick={handleClick}>{text}</button>\r\n\r\nexport default Button","import React from 'react'\r\nimport Person from './Person'\r\nimport Button from './Button'\r\n\r\nconst Persons = ({persons, limit, callServer}) => {\r\n\r\n  const deleteNumber = (person) => {\r\n    const result = window.confirm(`Poistetaanko ${person.name}?`)\r\n    if (result) { callServer('delete', person) }\r\n  }\r\n\r\n  const matchFilter = (element) =>\r\n    element.name.toUpperCase().startsWith(limit.toUpperCase())\r\n\r\n  const personsToShow = persons.filter(matchFilter)\r\n\r\n  return (\r\n    personsToShow.map(person => {\r\n      return (\r\n        <div key={person.name}>\r\n        <Person key={person.name} person={person} />\r\n        <Button\r\n        handleClick={() => deleteNumber(person)}\r\n        text='poista'\r\n        />\r\n      </div>\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\nexport default Persons","import React, { useState, useEffect } from 'react'\nimport numberService from './services/numbers'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\n\nconst App = () => {\n\n  useEffect( () => callServer('get'), [] )\n\n  const [ persons, setPersons ] = useState([])\n  const [ message, setMessage ] = useState('')\n  const [ messageColor, setMessageColor ] = useState('')\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ limit, setLimit ] = useState('')\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleLimitChange = (event) => setLimit(event.target.value)\n\n  const sameName = (element) => element.name === newName\n\n  const showMessage = (message, person) => {\n    if (message === 'get')\n    {\n      setMessage(`Numerot ladattin onnistuneesti`)\n      setMessageColor('green')\n    }\n    if (message === 'post')\n    {\n      setMessage(`Lisättiin ${newName}`)\n      setMessageColor('green')\n    }\n    if (message === 'put')\n    {\n      setMessage(`Muokattiin henkilöä ${newName}`)\n      setMessageColor('green')\n    }\n    if (message === 'delete')\n    {\n      setMessage(`Poistettiin ${person.name}`)\n      setMessageColor('green')\n    }\n    if (message === 'error')\n    {\n      setMessage(`Henkilö ${newName} on jo poistettu`)\n      setMessageColor('red')\n    }\n    setTimeout(() => {\n      setMessage(null)\n    }, 3000)\n  }\n\n  const callServer = (method, person) => {\n    if (method === 'get')\n    {\n      numberService.getAll()\n      .then(response => {\n        showMessage('get')\n        setPersons(response.data)\n      })\n    }\n    if (method === 'post')\n    {\n      const personObject = { name: newName, number: newNumber }\n      numberService.create(personObject)\n      .then(response => {\n        showMessage('post')\n        setPersons(persons.concat(response.data))\n      })\n    }\n    if (method === 'put')\n    {\n      const personToChange = persons.find(sameName)\n      personToChange.number = newNumber\n      numberService.update(personToChange.id, personToChange)\n      .then(response => {\n        showMessage('put')\n        setPersons(persons.map(element =>\n          element.id !== personToChange.id ? element : response.data))\n      })\n      .catch(() => {\n        showMessage('error')\n        setPersons(persons.filter(element =>\n          element.id !== personToChange.id))\n      })\n    }\n    if (method === 'delete')\n    {\n      numberService.remove(person.id)\n      .then(() => {\n        showMessage('delete', person)\n        setPersons(persons.filter(element =>\n          element.id !== person.id))\n      })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (newName !== '')\n    {\n      if (persons.find(sameName) === undefined)\n      {\n        callServer('post')\n      }\n      else\n      {\n        if (newNumber !== '')\n        {\n          const personToChange = persons.find(sameName)\n          if (personToChange.number !== '')\n          {\n            const result = window.confirm(`${personToChange.name} on jo luettelossa, korvataanko vanha numero uudella?`)\n            if (result)\n            {\n              callServer('put')\n            }\n          }\n          else\n          {\n            callServer('put')\n          }\n        }\n        else\n        {\n          window.alert(`${newName} on jo luettelossa`)\n        }\n      }\n    }\n    else\n    {\n      window.alert(`nimi-kenttä on tyhjä`)\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Notification message={message} color={messageColor} />\n      <Filter limit={limit} handleLimitChange={handleLimitChange} />\n      <h3>lisää uusi</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h3>Numerot</h3>\n      <Persons\n        persons={persons}\n        limit={limit}\n        callServer={callServer} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}